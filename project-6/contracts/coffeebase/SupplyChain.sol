// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";

contract SupplyChain is ConsumerRole, DistributorRole, FarmerRole, RetailerRole {

  // Universal Product Code (UPC)
  uint  upc;

  // Stock Keeping Unit (SKU)
  uint  sku;

  // UPC to Item.
  mapping (uint => Item) items;

  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
  }

  State constant defaultState = State.Harvested;

  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address, 'Not verified'); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price, 'Not paid enough'); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    payable(items[_upc].consumerID).transfer(amountToReturn);
  }

  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested, 'Not harvested yet');
    _;
  }

  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, 'Not processed yet');
    _;
  }

  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, 'Not packed yet');
    _;
  }

  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, 'Not for sale yet');
    _;
  }

  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, 'Not sold yet');
    _;
  }
  
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, 'Not shipped yet');
    _;
  }

  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, 'Not received yet');
    _;
  }

  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, 'Not purchased yet');
    _;
  }

  constructor() payable {
    sku = 1;
    upc = 1;
  }

  /**
    Allows farmer to harvest item.
    - Item details are saved,
    - and Harvested event emitted.
   */
  function harvestItem(
    uint _upc,
    address _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory _originFarmLongitude,
    string memory _productNotes
  ) public onlyFarmer {
    items[_upc].upc = _upc;
    items[_upc].sku = sku;
    items[_upc].productID = _upc * 10000 + sku;
    items[_upc].originFarmerID = _originFarmerID;
    items[_upc].originFarmName = _originFarmName;
    items[_upc].originFarmInformation = _originFarmInformation;
    items[_upc].originFarmLatitude = _originFarmLatitude;
    items[_upc].originFarmLongitude = _originFarmLongitude;
    items[_upc].productNotes = _productNotes;
    items[_upc].ownerID = _originFarmerID;
    sku = sku + 1;
    emit Harvested(_upc); 
  }

  /**
    Allows farmer to process his harvested item.
    - Item state is changed,
    - and Processed event emitted.
   */
  function processItem(uint _upc) public harvested(_upc) verifyCaller(items[_upc].originFarmerID) {
    items[_upc].itemState = State.Processed;
    emit Processed(_upc);
  }

  /**
    Allows farmer to pack his processed item.
    - Item state is changed,
    - and Packed event emitted.
   */
  function packItem(uint _upc) public processed(_upc) verifyCaller(items[_upc].originFarmerID){
    items[_upc].itemState = State.Packed;
    emit Packed(_upc);
  }

  /**
    Allows farmer to sell his packed item.
    - Item state is changed,
    - price added,
    - and ForSale event emitted. 
   */
  function sellItem(uint _upc, uint _price) public packed(_upc) verifyCaller(items[_upc].originFarmerID) {
    items[_upc].productPrice = _price;
    items[_upc].itemState = State.ForSale;
    emit ForSale(_upc);
  }

  /**
    Allows distributor to buy an item that is for sale if he has paid enough.
    - Item state is changed,
    - ownerID and distributorID changed accordingly,
    - the farmer is paid,
    - excess ether sent is refunded back,
    - and Sold event emitted.
   */
  function buyItem(uint _upc) public payable onlyDistributor forSale(_upc) paidEnough(items[_upc].productPrice) checkValue(_upc) {
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;
    payable(items[_upc].originFarmerID).transfer(msg.value);
    emit Sold(_upc);
  }

  /**
    Allows distributor to ship his sold item.
    - Item state is changed,
    - and Shipped event emitted.
   */
  function shipItem(uint _upc) public sold(_upc) verifyCaller(items[_upc].distributorID) {
    items[_upc].itemState = State.Shipped;
    emit Shipped(_upc);
  }

  /**
    Allows retailer to receive an item that is in Shipped state.
    - Item state is changed,
    - ownerID and retailerID changed accordingly,
    - and Received event emitted.

    Access Control List enforced by calling Smart Contract / DApp:
    - addRetailer must be called first.
   */
  function receiveItem(uint _upc) public onlyRetailer shipped(_upc) {
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;
    emit Received(_upc);
  }

  /**
    Allows consumer to purchase an item that is in Received state
    - item state is changed,
    - ownerID and consumerID changed accordingly,
    - and Purchased event emitted.
  
    Access Control List enforced by calling Smart Contract / DApp:
    - addConsumer must be called first.
   */
  function purchaseItem(uint _upc) public onlyConsumer received(_upc) {
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string  memory originFarmName,
    string  memory originFarmInformation,
    string  memory originFarmLatitude,
    string  memory originFarmLongitude
  ) {
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = items[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;
  }

  function fetchItemBufferTwo(uint _upc) public view returns (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string  memory productNotes,
    uint    productPrice,
    uint    itemState,
    address distributorID,
    address retailerID,
    address consumerID
  ) {
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint256(items[_upc].itemState);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;
  }
}
